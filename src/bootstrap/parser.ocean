jison parser = require 'jison':Parser
terms = require '../lib/codeGenerator'
ms = require '../lib/memorystream'

create parser with grammar ?grammar =
    new (jison parser @grammar)

identifier pattern = '[a-zA-Z_$][a-zA-Z_$0-9]*'

grammar = #
    lex #
        start conditions #{interpolated_string, interpolated_string_terminal}

        rules [
            ['\\s+'. '/* ignore whitespace */']
            ['[0-9]+\\.[0-9]+'. 'return ''float'';']
            ['[0-9]+'. 'return ''integer'';']
            ['@' + (identifier pattern). 'return ''argument'';']
            ['\\?' + (identifier pattern). 'return ''parameter'';']
            [identifier pattern. 'return ''identifier'';']
            ['[\\+\\*/^%~-][\\+\\*/^%~!=-]*'. 'return ''identifier'';']
            ['[=!][\\+\\*/^%~!=-]+'. 'return ''identifier'';']
            ['='. 'return ''='';']
            [','. 'return '','';']
            [':'. 'return '':'';']
            ['!'. 'return ''!'';']
            ['\\.'. 'return ''.'';']
            ['\\('. 'if (yy.interpolation.interpolating()) {yy.interpolation.openBracket()} return ''('';']
            ['\\)'. 'if (yy.interpolation.interpolating()) {yy.interpolation.closeBracket(); if (yy.interpolation.finishedInterpolation()) {this.popState(); this.popState(); yy.interpolation.stopInterpolation()}} return '')'';']
            ['{'. 'return ''{'';']
            ['}'. 'return ''}'';']
            ['\\['. 'return ''['';']
            ['\\]'. 'return '']'';']
            ['$'. 'return ''eof'';']
            ['#'. 'return ''#'';']
            ['''([^'']*'''')*[^'']*'''. 'return ''string'';']
            ['"'. 'this.begin(''interpolated_string''); return ''start_interpolated_string'';']
            [['interpolated_string']. '@'. 'this.begin(''interpolated_string_terminal''); return ''interpolated_string_terminal_start'';']
            [['interpolated_string_terminal']. identifier pattern. 'this.popState(); return ''identifier'';']
            [['interpolated_string_terminal']. '\\('. 'yy.interpolation.startInterpolation(); this.begin(''INITIAL''); return ''('';']
            [['interpolated_string']. '"'. 'this.popState(); return ''end_interpolated_string'';']
            [['interpolated_string']. '[^"@]*'. 'return ''interpolated_string_body'';']
            ['.'. 'return ''non_token'';']
        ]

    operators [
        ['right'. '=']
        ['left'. ':']
    ]

    start 'module'

    bnf #
        'module' [
            ['statements eof'. 'return yy.module($1);']
        ]
        'statements' [
            ['statements_list'. '$$ = yy.statements($1);']
        ]
        'hash_entries' [
            ['hash_entries comma_dot basic_expression'. '$1.push($3.hashEntry()); $$ = $1;']
            ['basic_expression'. '$$ = [$1.hashEntry()];']
            [''. '$$ = [];']
        ]
        comma_dot [
            ['.'. '$$ = $1;']
            [','. '$$ = $1;']
        ]
        'statements_list' [
            ['statements_list . expression'. '$1.push($3); $$ = $1;']
            ['expression'. '$$ = [$1];']
            [''. '$$ = [];']
        ]
        'expression' [
            ['expression : complex_expression'. '$$ = $3.methodCall($1);']
            ['complex_expression = expression'. '$$ = $1.definitionTarget($3);']
            ['expression : complex_expression = expression'. '$$ = $3.objectDefinitionTarget($1, $5);']
            ['complex_expression'. '$$ = $1.expression();']
        ]
        'complex_expression' [
            ['basic_expression_list'. '$$ = yy.complexExpression($1);']
        ]
        'basic_expression_list' [
            ['basic_expression_list , basic_expression'. '$1.push($3); $$ = $1;']
            ['basic_expression'. '$$ = [$1];']
        ]
        'basic_expression' [
            ['terminal_list'. '$$ = yy.basicExpression($1);']
        ]
        'terminal_list' [
            ['terminal_list terminal'. '$1.push($2); $$ = $1;']
            ['terminal'. '$$ = [$1];']
        ]
        'terminal' [
            ['( expression )'. '$$ = $2;']
            ['{ statements }'. '$$ = yy.block([], $2);']
            ['[ statements_list ]'. '$$ = yy.list($2);']
            ['# { hash_entries }'. '$$ = yy.hash($3);']
            ['float'. '$$ = yy.float(parseFloat(yytext));']
            ['integer'. '$$ = yy.integer(parseInt(yytext));']
            ['identifier'. '$$ = yy.identifier(yytext);']
            ['argument'. '$$ = yy.variable([yytext.substring(1)]);']
            ['parameter'. '$$ = yy.parameter([yytext.substring(1)]);']
            ['string'. '$$ = yy.string(yy.normaliseString(yytext));']
            ['interpolated_string'. '$$ = $1;']
            ['!'. '$$ = yy.noArgSuffix();']
        ]
        'interpolated_terminal' [
            ['( expression )'. '$$ = $2;']
            ['identifier'. '$$ = yy.variable([$1]);']
        ]
        'interpolated_string' [
            ['start_interpolated_string interpolated_string_components end_interpolated_string'. '$$ = yy.interpolatedString($2);']
            ['start_interpolated_string end_interpolated_string'. '$$ = yy.interpolatedString([]);']
        ]
        'interpolated_string_components' [
            ['interpolated_string_components interpolated_string_component'. '$1.push($2); $$ = $1;']
            ['interpolated_string_component'. '$$ = [$1];']
        ]
        'interpolated_string_component' [
            ['interpolated_string_terminal_start interpolated_terminal'. '$$ = $2;']
            ['interpolated_string_body'. '$$ = yy.string($1);']
        ]

parser = create parser with grammar @grammar
parser: yy = terms

exports: parse ?source = parser: parse @source
