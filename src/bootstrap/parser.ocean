jison parser = require 'jison':Parser
terms = require '../lib/codeGenerator'
ms = require '../lib/memorystream'

create parser with grammar ?grammar =
    new (jison parser @grammar)

identifier pattern = '[a-zA-Z_$][a-zA-Z_$0-9]*'

grammar = #
    lex #
        rules [
            ['\\s+'. '/* ignore whitespace */']
            ['[0-9]+\\.[0-9]+'. 'return ''float'';']
            ['[0-9]+'. 'return ''integer'';']
            ['@' + (identifier pattern). 'return ''argument'';']
            ['\\?' + (identifier pattern). 'return ''parameter'';']
            [identifier pattern. 'return ''identifier'';']
            ['='. 'return ''='';']
            [','. 'return '','';']
            [':'. 'return '':'';']
            ['!'. 'return ''!'';']
            ['\\.'. 'return ''.'';']
            ['\\('. 'return ''('';']
            ['\\)'. 'return '')'';']
            ['{'. 'return ''{'';']
            ['}'. 'return ''}'';']
            ['\\['. 'return ''['';']
            ['\\]'. 'return '']'';']
            ['$'. 'return ''eof'';']
            ['#'. 'return ''#'';']
            ['''([^'']*'''')*[^'']*'''. 'return ''string'';']
            ['.'. 'return ''non_token'';']
        ]

    operators [
        ['right'. '=']
        ['left'. ':']
    ]

    start 'module'

    bnf #
        'module' [
            ['statements eof'. 'return yy.module($1);']
        ]
        'statements' [
            ['statements_list'. '$$ = yy.statements($1);']
        ]
        'hash_entries' [
            ['hash_entries , basic_expression'. '$1.push($3.hashEntry()); $$ = $1;']
            ['basic_expression'. '$$ = [$1.hashEntry()];']
            [''. '$$ = [];']
        ]
        'statements_list' [
            ['statements_list . expression'. '$1.push($3); $$ = $1;']
            ['expression'. '$$ = [$1];']
            [''. '$$ = [];']
        ]
        'expression' [
            ['expression : basic_expression'. '$$ = $3.methodCall($1);']
            ['basic_expression = expression'. '$$ = $1.definitionTarget($3);']
            ['expression : basic_expression = expression'. '$$ = $3.objectDefinitionTarget($1, $5);']
            ['basic_expression'. '$$ = $1.expression();']
        ]
        'basic_expression' [
            ['terminal_list'. '$$ = yy.basicExpression($1);']
        ]
        'terminal_list' [
            ['terminal_list terminal'. '$1.push($2); $$ = $1']
            ['terminal'. '$$ = [$1];']
        ]
        'terminal' [
            ['( expression )'. '$$ = $2;']
            ['{ statements }'. '$$ = yy.block([], $2);']
            ['[ statements_list ]'. '$$ = yy.list($2);']
            ['# { hash_entries }'. '$$ = yy.hash($3);']
            ['float'. '$$ = yy.float(parseFloat(yytext));']
            ['integer'. '$$ = yy.integer(parseInt(yytext));']
            ['identifier'. '$$ = yy.identifier(yytext);']
            ['argument'. '$$ = yy.variable([yytext.substring(1)]);']
            ['parameter'. '$$ = yy.parameter([yytext.substring(1)]);']
            ['string'. '$$ = yy.string(yy.normaliseString(yytext));']
            ['!'. '$$ = yy.noArgSuffix();']
        ]

parser = create parser with grammar @grammar
parser: yy = terms

exports: parse ?source = parser: parse @source
