fs = require 'fs'
parse = require './parser.ocean': parse
ms = require '../lib/memorystream'
_ = require 'underscore'
uglify = require 'uglify-js'
preparser = require './preparser.ocean'
util = require 'util'
errors = require './codeGenerator/errors'
require './runtime.ocean'
error output = require '../lib/errorOutput'

inspect term ?term =
    util: inspect @term @false 10

preparse = preparser: create file parser!

generate js from term ?term =
    stream = new (ms: MemoryStream!)
    term: generate java script @stream
    stream: to string!

run source ?source with filename ?filename =
    s = preparse @source
    console: log @s

show parsed source ?source =
    term = parse (preparse @source)
    console: log 'term' (inspect term @term)

show generated code for ?source =
    term = parse (preparse @source)
    js = generate js from term @term
    beautiful js = beautify @js
    console: log (beautiful js)

beautify ?code =
  ast = uglify: parser: parse @code
  uglify: uglify: gen_code @ast #{beautify}

duplicate string ?s ?n times =
    strings = []
    for {i = 0} {@i < @n} {i = @i + 1}
      strings: push @s

    strings: join ''

index for file ?file with source ?source =
    object
        this: print index ?index =
            line details = error output: source @source index @index to line and column
            process:stderr:write (((filename + ':') + (line details: line number)) + '\n')
            process:stderr:write ((line details:line) + '\n')
            process:stderr:write ((duplicate string ' ' (line details:column number - 1) times) + '^\n')
        
        this: lines in range ?range =
            lines = source: split (new (RegExp '\n'))
            lines: slice ((range:from) - 1) (range:to)
        
        this: print lines in range ?range =
            for each ?line in (this: lines in range @range)
                process:stderr:write (line + '\n')
        
        this: print location ?location =
            process:stderr:write (((filename + ':') + (location: first line)) + '\n')
            this: print lines in range #{from (location: first line), to (location: last line)}
            process:stderr:write (((duplicate string ' ' (location: first column) times) + (duplicate string '^' ((location: last column) - (location:first column)) times)) + '\n')

run source ?source with filename ?filename =
    term = parse (preparse @source)
    if (errors: has errors!)
        errors: print errors (index for file @filename with source @source)
    else
        console: log 'no errors'
        js = generate js from term @term
        beautiful js = beautify @js
        console: log (beautiful js)
        console: log '-------------'
        fs: write file sync ((filename:replace((new (RegExp '\\..*?$')) '')) + '.js') (beautiful js)
        module: filename = fs: realpath sync @filename
        process: argv: 1 = module: filename
        module: _compile (beautiful js) @filename


filename = 'one.ocean'
fs: read file @filename ?error ?buffer
    source = buffer: to string!
    run source @source with filename @filename
