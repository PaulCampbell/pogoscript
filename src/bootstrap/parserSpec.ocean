require 'cupoftea'
require './assertions.ocean'

parse = require './parser.ocean': parse

assume ?term is module with statements ?action =
    if (term: is module)
        action (term: statements)
    else
        throw (new (Error ('expected module, but found ' + @term)))

assume ?statements has just one statement ?action =
    if ((statements: statements: length) == 1)
        action (statements: statements: 0)
    else
        throw (new (Error ('expected statements to have just one statement, found ' + (statements: statements: length))))

expression ?source =
    term = parse @source
    assume @term is module with statements ?statements
        assume @statements has just one statement ?s
            s

spec 'parser'
    spec 'terminals'
        spec 'integer'
            (expression '5') should contain fields #
                integer 5

        spec 'float'
            (expression '5.6') should contain fields #
                float 5.6

        spec 'variables'
            spec 'simple'
                (expression 'total weight') should contain fields #
                    variable ['total'. 'weight']

            spec 'operators'
                (expression '+ * / - ^ % != == !== ~') should contain fields #
                    variable ['+'. '*'. '/'. '-'. '^'. '%'. '!='. '=='. '!=='. '~']
        
        spec 'strings'
            spec 'simple string'
                (expression '''a string''') should contain fields #
                    is string
                    string 'a string'
                    
            spec 'string with single quotes'
                (expression '''''''alright!'''' he said''') should contain fields #
                    is string
                    string '''alright!'' he said'

        spec 'interpolated strings'
            spec 'simple'
                (expression '"a string"') should contain fields #
                    is interpolated string
                    components [
                        #{string 'a string'}
                    ]

            spec 'null string'
                (expression '""') should contain fields #
                    is interpolated string
                    components [
                    ]

            spec 'with single identifier variable'
                (expression '"a boat @length meters in length"') should contain fields #
                    is interpolated string
                    components [
                        #{string 'a boat '}
                        #{variable ['length']}
                        #{string ' meters in length'}
                    ]

            spec 'with single variable expression'
                (expression '"a boat @(boat length) meters in length"') should contain fields #
                    is interpolated string
                    components [
                        #{string 'a boat '}
                        #{variable ['boat'. 'length']}
                        #{string ' meters in length'}
                    ]

            spec 'with complex expression'
                (expression '"a boat @(lookup boat length from (boat database)) meters in length"') should contain fields #
                    is interpolated string
                    components [
                        #{string 'a boat '}
                        #
                            function #{variable ['lookup'. 'boat'. 'length'. 'from']}
                            arguments [#{variable ['boat'. 'database']}]

                        #{string ' meters in length'}
                    ]

            spec 'with inner interpolation'
                (expression '"a boat @("@(boat length) meters") in length"') should contain fields #
                    is interpolated string
                    components [
                        #{string 'a boat '}
                        #
                            is interpolated string
                            components [
                                #{variable ['boat'. 'length']}
                                #{string ' meters'}
                            ]

                        #{string ' in length'}
                    ]
        
        spec 'lists'
            spec 'empty'
                (expression '[]') should contain fields #
                    is list
                    items []
            
            spec 'one item'
                (expression '[1]') should contain fields #
                    is list
                    items [#{integer 1}]
            
            spec 'two items'
                (expression '[1. 2]') should contain fields #
                    is list
                    items [
                        #{integer 1}
                        #{integer 2}
                    ]
        
        spec 'hashes'
            spec 'empty hash'
                (expression '#{}') should contain fields #
                    is hash
                    entries []
                    
            spec 'hash with one entry'
                (expression '#{port 1234}') should contain fields #
                    is hash
                    entries [
                        #
                            field ['port']
                            value #{integer 1234}
                    ]
                    
            spec 'hash with two entries'
                (expression '#{port 1234, ip address ''1.1.1.1''}') should contain fields #
                    is hash
                    entries [
                        #
                            field ['port']
                            value #{integer 1234}
                            
                        #
                            field ['ip'. 'address']
                            value #{string '1.1.1.1'}
                    ]
                    
            spec 'hash with two entries on different lines'
                (expression '#{port 1234. ip address ''1.1.1.1''}') should contain fields #
                    is hash
                    entries [
                        #
                            field ['port']
                            value #{integer 1234}
                            
                        #
                            field ['ip'. 'address']
                            value #{string '1.1.1.1'}
                    ]
                    
            spec 'hash with true entry'
                (expression '#{port 1234, readonly}') should contain fields #
                    is hash
                    entries [
                        #
                            field ['port']
                            value #{integer 1234}
                            
                        #
                            field ['readonly']
                            value #{boolean @true}
                    ]

    spec 'function calls'
        spec 'function call'
            (expression 'touch @file') should contain fields #
                function #{variable ['touch']}
                arguments [#{variable ['file']}]

        spec 'function call with no argument'
            (expression 'delete everything!') should contain fields #
                function #{variable ['delete'. 'everything']}
                arguments []

        spec 'function call with block with parameters'
            (expression 'with file @file ?stream {stream}') should contain fields #
                function #{variable ['with'. 'file']}
                arguments [
                    #{variable ['file']}
                    #
                        body #{statements [#{variable ['stream']}]}
                        parameters [#{parameter ['stream']}]
                ]

        spec 'function call with two blocks with parameters'
            (expression 'name ?x {x} ?y {y}') should contain fields #
                function #{variable ['name']}
                arguments [
                    #
                        body #{statements [#{variable ['x']}]}
                        parameters [#{parameter ['x']}]

                    #
                        body #{statements [#{variable ['y']}]}
                        parameters [#{parameter ['y']}]
                ]

        spec 'function call with two optional arguments'
            (expression 'name @a, port 34, server @s') should contain fields #
                function #{variable ['name']}
                arguments [
                    #{variable ['a']}
                ]
                optional arguments [
                    #
                        field ['port']
                        value #{integer 34}

                    #
                        field ['server']
                        value #{variable ['s']}
                ]

        spec 'function call with no arguments and one optional argument'
            (expression 'start server, port 34') should contain fields #
                function #{variable ['start'. 'server']}
                arguments []
                optional arguments [
                    #
                        field ['port']
                        value #{integer 34}
                ]
    
    spec 'object operations'
        spec 'method call'
            (expression 'object: method @argument') should contain fields #
                is method call
                object #{variable ['object']}
                name ['method']
                arguments [#{variable ['argument']}]
        
        spec 'method call with optional arguments'
            (expression 'object: method @argument, view @view') should contain fields #
                is method call
                object #{variable ['object']}
                name ['method']
                arguments [#{variable ['argument']}]
                optional arguments [
                    #{field ['view'], value #{variable ['view']}}
                ]
        
        spec 'field reference'
            (expression 'object: field') should contain fields #
                is field reference
                object #{variable ['object']}
                name ['field']
        
        spec 'indexer'
            (expression 'object: @x') should contain fields #
                is indexer
                object #{variable ['object']}
                indexer #{variable ['x']}

    spec 'blocks'
        spec 'empty block'
            (expression '{}') should contain fields #
                is block
                parameters []
                body #{statements []}
                
        spec 'block'
            (expression '{x.y}') should contain fields #
                is block
                parameters []
                body #{statements [
                    #{variable ['x']}
                    #{variable ['y']}
                ]}

        spec 'block with parameter'
            (expression '?x {x.y}') should contain fields #
                is block
                parameters [#{parameter ['x']}]
                body #
                    statements [
                        #{variable ['x']}
                        #{variable ['y']}
                    ]

    spec 'assignment'
        spec 'assignment'
            (expression 'x = y') should contain fields #
                is definition
                target #{variable ['x']}
                source #{variable ['y']}

        spec 'function definition'
            spec 'function with one parameter'
                (expression 'func ?x = x') should contain fields #
                    is definition
                    target #{variable ['func']}
                    source #
                        parameters [#{parameter ['x']}]
                        body #{statements [#{variable ['x']}]}

            spec 'function with one parameter, and one optional parameter'
                (expression 'func ?x, port 80 = x') should contain fields #
                    is definition
                    target #{variable ['func']}
                    source #
                        parameters [#{parameter ['x']}]
                        optional parameters [#{field ['port'], value #{integer 80}}]
                        body #{statements [#{variable ['x']}]}

        spec 'field assignment'
            (expression 'o: x = y') should contain fields #
                is definition
                target #
                    is field reference
                    object #{variable ['o']}
                    name ['x']

                source #{variable ['y']}

        spec 'index assignment'
            (expression 'o: @x = y') should contain fields #
                is definition
                target #
                    is indexer
                    object #{variable ['o']}
                    indexer #{variable ['x']}

                source #{variable ['y']}

        spec 'assignment from field'
            (expression 'x = y: z') should contain fields #
                is definition
                target #{variable ['x']}
                source #
                    is field reference
                    object #
                        variable ['y']

                    name ['z']
